{"version":3,"sources":["Formulas.js","Interface.js","App.js","serviceWorker.js","index.js"],"names":["bigdecimal","require","factorial","n","ans","i","calcNChooseX","x","calcBinomialProbDist","p","x1","x2","bd_p","BigDecimal","sepBase","cmulTotal","numbers","lowEnd","highEnd","list","push","betweenList","Math","min","max","num","nCx","add","multiply","pow","subtract","roundingMode","ROUND_HALF_UP","setScale","stripTrailingZeros","toPlainString","resultValues","name","displayText","prefix","is_not_number","input","isNaN","App","useState","currentData","setCurrentData","currentError","setCurrentError","ShowError","err","Container","className","Form","style","Row","Col","md","Group","controlId","Label","display","latex","Control","tabIndex","sm","ButtonGroup","width","Button","variant","onClick","e","document","querySelector","value","block","preventDefault","var_p","trim","var_n","var_x1","var_x2","Number","parseInt","result","binomialProbability","lg","Card","Header","ListGroup","map","res","index","Item","key","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c904ad2.chunk.js","sourcesContent":["var bigdecimal = require(\"bigdecimal\");\r\n\r\n// Math-120 Formula Solver by Adam Angle\r\n\r\nfunction factorial(n) { \r\n  var ans=1; \r\n  for (var i = 2; i <= n; i++) \r\n    ans = ans * i; \r\n  return ans; \r\n} \r\n\r\nfunction calcNChooseX(n, x) {\r\n  return factorial(n) / (factorial(x) * factorial(n - x));\r\n}\r\n\r\nfunction betweenList(lowEnd, highEnd) {\r\n  var list = [];\r\n  for (var i = lowEnd; i <= highEnd; i++) {\r\n      list.push(i);\r\n  }\r\n  return list;\r\n}\r\n\r\nfunction calcBinomialProbDist(n, p, x1, x2) {\r\n  let bd_p = new bigdecimal.BigDecimal(p);\r\n  \r\n  let sepBase = new bigdecimal.BigDecimal(1.0);\r\n  var cmulTotal = new bigdecimal.BigDecimal(0.0);\r\n  let numbers = betweenList(Math.min(x1, x2), Math.max(x1, x2));\r\n\r\n  for (const num of numbers) {\r\n    let nCx = new bigdecimal.BigDecimal(calcNChooseX(n, num));\r\n    cmulTotal = cmulTotal.add(nCx.multiply(bd_p.pow(num)).multiply(sepBase.subtract(bd_p).pow(n - num)));\r\n  }\r\n  var roundingMode = bigdecimal.BigDecimal.ROUND_HALF_UP;\r\n  return cmulTotal.setScale(18, roundingMode).stripTrailingZeros().toPlainString();\r\n}\r\n\r\nexport default function statCalc(n, p, x1, x2) {\r\n  // This function assumes that the values in the dataset are in numerical ascending order.\r\n  return {\r\n    binomialProbability: calcBinomialProbDist(n, p, x1, x2)\r\n  }\r\n}\r\n","export const tex_p = `p`;\r\nexport const tex_n = `n`;\r\nexport const tex_x1 = `x_1`;\r\nexport const tex_x2 = `x_2`;\r\n\r\nexport function showIfNotNaN(val) {\r\n  return isNaN(val) ? 'Unknown' : val;\r\n}\r\n\r\nexport var resultValues = [\r\n  {\r\n    name: 'binomialProbability',\r\n    displayText: 'Binomial Probability',\r\n    prefix: `P(x) = `\r\n  },\r\n]\r\n  ","import React, { useState } from 'react';\nimport statCalc from './Formulas'\n\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Form from 'react-bootstrap/Form';\nimport { Row, Col, Card, ListGroup } from 'react-bootstrap';\nimport Tex2SVG, { MathJaxProvider } from \"react-hook-mathjax\";\nimport { resultValues, tex_p, tex_n, tex_x1, tex_x2 } from './Interface';\n\nimport './App.css';\n\nfunction is_not_number(input) {\n  return (isNaN(input) && input !== '') || input === '';\n}\n\nfunction App() {\n  const [currentData, setCurrentData] = useState({});\n  const [currentError, setCurrentError] = useState('');\n\n  const ShowError = (err) => {\n    setCurrentError(err);\n  }\n\n  const Calculate = (e) => {\n    if (e) e.preventDefault();\n\n    // First, get all of the values\n    let var_p = document.querySelector('#calcvar_p').value.trim();\n    let var_n = document.querySelector('#calcvar_n').value.trim();\n    let var_x1 = document.querySelector('#calcvar_x1').value.trim();\n    let var_x2 = document.querySelector('#calcvar_x2').value.trim();\n\n    // Input Validation //\n\n    // Check if there are enough values (2 minimum)\n    if (is_not_number(var_p) || var_p > 1 || var_p < 0) {\n      ShowError(\n        <>\n          <Tex2SVG display=\"inline\" latex={tex_p} /> must be a valid number between 0 and 1 inclusive.\n        </>\n      );\n      return;\n    } else {\n      var_p = Number(var_p);\n    }\n    if (is_not_number(var_n)) {\n      ShowError(\n        <>\n          <Tex2SVG display=\"inline\" latex={tex_n} /> must be a valid integer.\n        </>\n      );\n      return;\n    } else {\n      var_n = parseInt(var_n);\n    }\n    if (var_n > 300) {\n      ShowError(\n        <>\n          <Tex2SVG display=\"inline\" latex={tex_n} /> must be less than 300\n        </>\n      );\n      return;\n    }\n    if (is_not_number(var_x1) || var_x1 > var_n || var_x1 < 0) {\n      ShowError(\n        <>\n          <Tex2SVG display=\"inline\" latex={tex_x1} /> must be a valid integer less than or equal to n.\n        </>\n      );\n      return;\n    } else {\n      var_x1 = parseInt(var_x1);\n    }\n    if (is_not_number(var_x2) || var_x2 > var_n || var_x2 < 0) {\n      ShowError(\n        <>\n          <Tex2SVG display=\"inline\" latex={tex_x2} /> must be a valid integer less than or equal to n.\n        </>\n      );\n      return;\n    } else {\n      var_x2 = parseInt(var_x2);\n    }\n\n    setCurrentError('');\n\n    // Calculation //\n    const result = statCalc(var_n, var_p, var_x1, var_x2);\n\n    // Display Values //\n    setCurrentData(result);\n  }\n\n  const Clear = (e) => {\n    setCurrentData({});\n    setCurrentError('');\n    document.querySelector('#calcvar_p').value = \"\";\n    document.querySelector('#calcvar_n').value = \"\";\n    document.querySelector('#calcvar_x1').value = \"\";\n    document.querySelector('#calcvar_x2').value = \"\";\n  }\n\n  return (\n    <MathJaxProvider>\n      <Container className=\"p-3\">\n        <div className=\"calc-title\">\n          <h3 className=\"header\">Math-120 Binomial Distribution Calculator</h3>\n        </div>\n        <Form style={{ 'fontSize': '14px' }}>\n          <Form.Row>\n            <Col md={3}>\n              <Form.Group controlId=\"calcvar_p\">\n                <Form.Label>Probability of success (<Tex2SVG display=\"inline\" latex={tex_p} />)</Form.Label>\n                <Form.Control tabIndex={1} />\n              </Form.Group>\n            </Col>\n            <Col md={3}>\n              <Form.Group controlId=\"calcvar_n\">\n                <Form.Label>Total number of trials (<Tex2SVG display=\"inline\" latex={tex_n} />)</Form.Label>\n                <Form.Control tabIndex={2} />\n              </Form.Group>\n            </Col>\n            <Col md={3}>\n              <Form.Group controlId=\"calcvar_x1\">\n                <Form.Label>Lower fence (<Tex2SVG display=\"inline\" latex={tex_x1} />)</Form.Label>\n                <Form.Control tabIndex={3} />\n              </Form.Group>\n            </Col>\n            <Col md={3}>\n              <Form.Group controlId=\"calcvar_x2\">\n                <Form.Label>Upper fence (<Tex2SVG display=\"inline\" latex={tex_x2} />)</Form.Label>\n                <Form.Control tabIndex={4} />\n              </Form.Group>\n            </Col>\n          </Form.Row>\n          <Row>\n            <Col sm={4}>\n              <ButtonGroup style={{ width: '100%' }}>\n                <Button variant=\"secondary\" onClick={Clear} tabIndex={6}>Clear</Button>\n                <Button variant=\"primary\" block onClick={Calculate} tabIndex={5}><strong>Calculate</strong></Button>\n              </ButtonGroup>\n            </Col>\n          </Row>\n          <Row style={{ 'color': 'red', 'display': currentError !== '' ? 'block' : 'none' }}>\n            <Col>\n              <p className=\"mb-0 card-subtext\">\n                {currentError}\n              </p>\n            </Col>\n          </Row>\n        </Form>\n        <Row className=\"justify-content-md-center\" style={{ 'marginTop': '1rem' }}>\n          <Col md={8} lg={6}>\n            <Card>\n              <Card.Header className=\"text-center\">\n                Answer\n              </Card.Header>\n              <ListGroup variant=\"flush\" style={{ 'display': 'table' }}>\n                {resultValues.map((res, index) => {\n                  return (\n                    <ListGroup.Item key={index}>\n                      <div className=\"lg-cell\">{res.displayText}</div>\n                      <div className=\"lg-cell lg-right\"><Tex2SVG display=\"inline\" latex={res.prefix} /></div>\n                      <div className=\"lg-cell\" id=\"ans-minimum\">{currentData[res.name]}</div>\n                    </ListGroup.Item>\n                  );\n                })}\n              </ListGroup>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-4 text-center\">\n          <Col>\n            <span className=\"bottom-credit\">Created by Adam Angle</span>\n          </Col>\n        </Row>\n      </Container>\n    </MathJaxProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}