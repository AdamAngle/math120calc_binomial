{"version":3,"sources":["Formulas.js","Interface.js","App.js","serviceWorker.js","index.js"],"names":["f","factorial","n","Big","times","calcNChooseX","x","div","calcBinomialProbDist","p","x1","x2","bd_p","sepBase","cmulTotal","numbers","lowEnd","highEnd","list","i","push","betweenList","Math","min","max","num","nCx","add","pow","minus","RM","toFixed","replace","resultValues","name","displayText","prefix","is_not_number","input","isNaN","App","useState","currentData","setCurrentData","currentError","setCurrentError","ShowError","err","Container","className","Form","style","onSubmit","e","preventDefault","var_p","document","querySelector","value","trim","var_n","var_x1","var_x2","display","latex","Number","parseInt","result","binomialProbability","Row","Col","md","Group","controlId","Label","Control","tabIndex","sm","ButtonGroup","width","Button","variant","onClick","type","block","lg","Card","Header","ListGroup","map","res","index","Item","key","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba607c3f.chunk.js","sourcesContent":["import Big from 'big.js';\r\n\r\n// Math-120 Formula Solver by Adam Angle\r\n\r\n// Memoization-based factorial with Big, because 300! is huge!\r\nvar f = [];\r\nfunction factorial (n) {\r\n  if (n === 0 || n === 1)\r\n    return Big(1);\r\n  if (f[n] > 0)\r\n    return f[n];\r\n  return f[n] = factorial(n-1).times(n);\r\n}\r\n\r\nfunction calcNChooseX(n, x) {\r\n  return factorial(n).div(factorial(x).times(factorial(n - x)));\r\n}\r\n\r\nfunction betweenList(lowEnd, highEnd) {\r\n  var list = [];\r\n  for (var i = lowEnd; i <= highEnd; i++) {\r\n      list.push(i);\r\n  }\r\n  return list;\r\n}\r\n\r\nfunction calcBinomialProbDist(n, p, x1, x2) {\r\n  let bd_p = new Big(p);\r\n  \r\n  let sepBase = new Big(1.0);\r\n  var cmulTotal = new Big(0.0);\r\n  let numbers = betweenList(Math.min(x1, x2), Math.max(x1, x2));\r\n\r\n\r\n  for (const num of numbers) {\r\n    let nCx = new Big(calcNChooseX(n, num));\r\n    cmulTotal = cmulTotal.add(nCx.times(bd_p.pow(num)).times(sepBase.minus(bd_p).pow(n - num)));\r\n  }\r\n  Big.RM = 1;\r\n  return cmulTotal.toFixed(18).replace(/(\\.0+|0+)$/, '');\r\n}\r\n\r\nexport default function statCalc(n, p, x1, x2) {\r\n  // This function assumes that the values in the dataset are in numerical ascending order.\r\n  return {\r\n    binomialProbability: calcBinomialProbDist(n, p, x1, x2)\r\n  }\r\n}\r\n","export const tex_p = `p`;\r\nexport const tex_n = `n`;\r\nexport const tex_x1 = `x_1`;\r\nexport const tex_x2 = `x_2`;\r\n\r\nexport function showIfNotNaN(val) {\r\n  return isNaN(val) ? 'Unknown' : val;\r\n}\r\n\r\nexport var resultValues = [\r\n  {\r\n    name: 'binomialProbability',\r\n    displayText: 'Binomial Probability',\r\n    prefix: `P(x) = `\r\n  },\r\n]\r\n  ","import React, { useState } from 'react';\r\nimport statCalc from './Formulas'\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Row, Col, Card, ListGroup } from 'react-bootstrap';\r\nimport Tex2SVG, { MathJaxProvider } from \"react-hook-mathjax\";\r\nimport { resultValues, tex_p, tex_n, tex_x1, tex_x2 } from './Interface';\r\n\r\nimport './App.css';\r\n\r\nfunction is_not_number(input) {\r\n  return (isNaN(input) && input !== '') || input === '';\r\n}\r\n\r\nfunction App() {\r\n  const [currentData, setCurrentData] = useState({});\r\n  const [currentError, setCurrentError] = useState('');\r\n\r\n  const ShowError = (err) => {\r\n    setCurrentError(err);\r\n  }\r\n\r\n  const Calculate = (e) => {\r\n    if (e) e.preventDefault();\r\n\r\n    // First, get all of the values\r\n    let var_p = document.querySelector('#calcvar_p').value.trim();\r\n    let var_n = document.querySelector('#calcvar_n').value.trim();\r\n    let var_x1 = document.querySelector('#calcvar_x1').value.trim();\r\n    let var_x2 = document.querySelector('#calcvar_x2').value.trim();\r\n\r\n    // Input Validation //\r\n\r\n    // Check if there are enough values (2 minimum)\r\n    if (is_not_number(var_p) || var_p > 1 || var_p < 0) {\r\n      ShowError(\r\n        <>\r\n          <Tex2SVG display=\"inline\" latex={tex_p} /> must be a valid number between 0 and 1 inclusive.\r\n        </>\r\n      );\r\n      return;\r\n    } else {\r\n      var_p = Number(var_p);\r\n    }\r\n    if (is_not_number(var_n)) {\r\n      ShowError(\r\n        <>\r\n          <Tex2SVG display=\"inline\" latex={tex_n} /> must be a valid integer.\r\n        </>\r\n      );\r\n      return;\r\n    } else {\r\n      var_n = parseInt(var_n);\r\n    }\r\n    if (var_n > 300) {\r\n      ShowError(\r\n        <>\r\n          <Tex2SVG display=\"inline\" latex={tex_n} /> must be less than 300\r\n        </>\r\n      );\r\n      return;\r\n    }\r\n    if (is_not_number(var_x1) || var_x1 > var_n || var_x1 < 0) {\r\n      ShowError(\r\n        <>\r\n          <Tex2SVG display=\"inline\" latex={tex_x1} /> must be a valid integer less than or equal to n.\r\n        </>\r\n      );\r\n      return;\r\n    } else {\r\n      var_x1 = parseInt(var_x1);\r\n    }\r\n    if (is_not_number(var_x2) || var_x2 > var_n || var_x2 < 0) {\r\n      ShowError(\r\n        <>\r\n          <Tex2SVG display=\"inline\" latex={tex_x2} /> must be a valid integer less than or equal to n.\r\n        </>\r\n      );\r\n      return;\r\n    } else {\r\n      var_x2 = parseInt(var_x2);\r\n    }\r\n\r\n    setCurrentError('');\r\n\r\n    // Calculation //\r\n    const result = statCalc(var_n, var_p, var_x1, var_x2);\r\n\r\n    // Display Values //\r\n    setCurrentData(result);\r\n  }\r\n\r\n  const Clear = (e) => {\r\n    setCurrentData({});\r\n    setCurrentError('');\r\n    document.querySelector('#calcvar_p').value = \"\";\r\n    document.querySelector('#calcvar_n').value = \"\";\r\n    document.querySelector('#calcvar_x1').value = \"\";\r\n    document.querySelector('#calcvar_x2').value = \"\";\r\n  }\r\n\r\n  return (\r\n    <MathJaxProvider>\r\n      <Container className=\"p-3\">\r\n        <div className=\"calc-title\">\r\n          <h3 className=\"header\">Math-120 Binomial Distribution Calculator</h3>\r\n        </div>\r\n        <Form style={{ 'fontSize': '14px' }} onSubmit={Calculate}>\r\n          <Form.Row>\r\n            <Col md={3}>\r\n              <Form.Group controlId=\"calcvar_p\">\r\n                <Form.Label>Probability of success (<Tex2SVG display=\"inline\" latex={tex_p} />)</Form.Label>\r\n                <Form.Control tabIndex={1} />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={3}>\r\n              <Form.Group controlId=\"calcvar_n\">\r\n                <Form.Label>Total number of trials (<Tex2SVG display=\"inline\" latex={tex_n} />)</Form.Label>\r\n                <Form.Control tabIndex={2} />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={3}>\r\n              <Form.Group controlId=\"calcvar_x1\">\r\n                <Form.Label>Lower fence (<Tex2SVG display=\"inline\" latex={tex_x1} />)</Form.Label>\r\n                <Form.Control tabIndex={3} />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={3}>\r\n              <Form.Group controlId=\"calcvar_x2\">\r\n                <Form.Label>Upper fence (<Tex2SVG display=\"inline\" latex={tex_x2} />)</Form.Label>\r\n                <Form.Control tabIndex={4} />\r\n              </Form.Group>\r\n            </Col>\r\n          </Form.Row>\r\n          <Row>\r\n            <Col sm={4}>\r\n              <ButtonGroup style={{ width: '100%' }}>\r\n                <Button variant=\"secondary\" onClick={Clear} tabIndex={6}>Clear</Button>\r\n                <Button variant=\"primary\" type=\"submit\" block tabIndex={5}><strong>Calculate</strong></Button>\r\n              </ButtonGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row style={{ 'color': 'red', 'display': currentError !== '' ? 'block' : 'none' }}>\r\n            <Col>\r\n              <p className=\"mb-0 card-subtext\">\r\n                {currentError}\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row className=\"justify-content-md-center\" style={{ 'marginTop': '1rem' }}>\r\n          <Col md={8} lg={6}>\r\n            <Card>\r\n              <Card.Header className=\"text-center\">\r\n                Answer\r\n              </Card.Header>\r\n              <ListGroup variant=\"flush\" style={{ 'display': 'table' }}>\r\n                {resultValues.map((res, index) => {\r\n                  return (\r\n                    <ListGroup.Item key={index}>\r\n                      <div className=\"lg-cell\">{res.displayText}</div>\r\n                      <div className=\"lg-cell lg-right\"><Tex2SVG display=\"inline\" latex={res.prefix} /></div>\r\n                      <div className=\"lg-cell\" id=\"ans-minimum\">{currentData[res.name]}</div>\r\n                    </ListGroup.Item>\r\n                  );\r\n                })}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mt-4 text-center\">\r\n          <Col>\r\n            <span className=\"bottom-credit\">Created by Adam Angle</span>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </MathJaxProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}